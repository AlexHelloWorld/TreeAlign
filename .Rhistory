expr_simulated <- read.csv("simulated_expr.csv", row.names = 1)
expr_simulated <- as.data.frame(t(expr_simulated))
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", row.names = 1)
gene_sum <- rowSums(expr)
expr_simulated <- expr_simulated * gene_sum
write.csv(expr_simulated, file = "simulated_expr_1.csv")
gene_sum
rownames(expr_simulated) <- rownames(expr)
colnames(expr_simulated) <- colnames(expr)
write.csv(expr_simulated, file = "simulated_expr_1.csv")
expr_simulated[1, ]
hist(expr_simulated[1, ])
hist(unlist(expr_simulated[1, ]))
table(unlist(expr_simulated[1, ]))
expr_simulated <- read.csv("simulated_expr.csv", row.names = 1)
sum(expr_simulated[1, ])
sum(expr_simulated[1, 1])
expr_simulated[1, 1]
unlist(expr_simulated[1, ])
table(unlist(expr_simulated[1, ]))
expr_simulated <- as.data.frame(t(expr_simulated))
table(unlist(expr_simulated[1, ]))
expr_simulated <- read.csv("simulated_expr.csv", row.names = 1)
expr_simulated <- as.data.frame(t(expr_simulated))
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", row.names = 1)
cell_sum <- colSums(expr)
expr_simulated <- expr_simulated * cell_sum
rownames(expr_simulated) <- rownames(expr)
colnames(expr_simulated) <- colnames(expr)
write.csv(expr_simulated, file = "simulated_expr_1.csv")
expr_simulated <- read.csv("simulated_expr.csv", row.names = 1)
expr_simulated <- as.data.frame(t(expr_simulated))
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", row.names = 1)
cell_sum <- colSums(expr)
expr_simulated <- expr_simulated * cell_sum
rownames(expr_simulated) <- rownames(expr)
colnames(expr_simulated) <- colnames(expr)
write.csv(expr_simulated, file = "simulated_expr_1.csv")
expr_simulated[1:5, 1:5]
expr_expected_simulated <- read.csv("expected_expr_simulation.csv", row.names = 1)
expr_expected_simulated[1, ]
unlist(expr_expected_simulated[1, ])
hist(unlist(expr_expected_simulated[1, ]))
hist(log(unlist(expr_expected_simulated[1, ])))
expr[1:5, 1:5]
unlist(expr[1, ])
hist(unlist(expr[1, ]))
log(hist(unlist(expr[1, ])))
hist(log(unlist(expr[1, ])))
hist(unlist(expr[1, ]))
dim(expr)
dim(expr_expected_simulated)
hist(unlist(expr[, 1]))
hist(log(unlist(expr[, 1])))
hist(unlist(expr[1, ]))
hist(log(unlist(expr_expected_simulated[1, ])))
hist(log(unlist(expr_expected_simulated[, ])))
hist(log(unlist(expr_expected_simulated[, 1])))
hist(log(unlist(expr[1, ])))
hist(log(unlist(expr[2, ])))
hist(log(unlist(expr[3, ])))
hist(log(unlist(expr_expected_simulated[, 1])))
hist(log(unlist(expr_expected_simulated[, 2])))
hist(log(unlist(expr_expected_simulated[, 3])))
hist(log(unlist(expr[3, ])))
hist(log(unlist(expr[, 1])))
hist(log(log(unlist(expr[, 1]))))
hist(log(unlist(expr_expected_simulated[, 1])))
hist(unlist(expr_expected_simulated[, 1]))
unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)]
sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)][1:5])
sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)][1:5])/sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)])
expr_simulated[1, ]
unlist(expr_simulated[1, ])
table(unlist(expr_simulated[1, ]))
table(unlist(expr_simulated[, 1]))
hist(unlist(expr_expected_simulated[1, ]))
sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)][1:10])/sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)])
sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)][1:20])/sum(unlist(expr_expected_simulated[, 1])[order(unlist(expr_expected_simulated[, 1]), decreasing = TRUE)])
length(unlist(expr_expected_simulated[, 1]))
unlist(expr[1, ])
table(unlist(expr[1, ]))
sum(unlist(expr_simulated[1, ]))
sum(unlist(expr_simulated[2, ]))
sum(unlist(expr_simulated[3, ]))
sum(unlist(expr_simulated[4, ]))
hist(unlist(expr_simulated[2, ]))
hist(unlist(expr_simulated[4, ]))
hist(log(unlist(expr_simulated[4, ])))
hist(log(unlist(expr_simulated[4, ])))
table(unlist(expr_simulated[4, ])
)
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
unlist(expr_simulated[1, ])
hist(unlist(expr_simulated[1, ]))
tble(unlist(expr_simulated[1, ]))
table(unlist(expr_simulated[1, ]))
table(unlist(expr_simulated[1\2, ]))
table(unlist(expr_simulated[2, ]))
table(unlist(expr_simulated[3, ]))
table(unlist(expr_simulated[5, ]))
table(unlist(expr_simulated[4, ]))
rowSums(expr_simulated)
hist(rowSums(expr_simulated))
hist(log(rowSums(expr_simulated)))
sum(log(rowSums(expr_simulated)) == 0)
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated <- expr_simulated * colSums(expr)
expr_simulated[1:4, 1:4]
write.csv(expr_simulated, file = "expr_simulated.csv")
hist(expr_simulated[1, ])
hist(log10(expr_simulated[1, ]))
hist(log10(expr_simulated[, 1]))
hist(log10(expr_simulated[, 1]))
hist(log10(expr_simulated[, 2]))
hist(log10(expr_simulated[, 3]))
hist(log10(expr_simulated[1, ]))
sum(expr_simulated[, 1])
sum(expr_simulated[, 2])
sum(expr_simulated[, 3])
sum(expr_simulated[, 5])
hist(expr_simulated[, 5])
hist(log10(expr_simulated[, 5]))
table(expr_simulated[, 5])
expr_simulated[, 5]
table(expr_simulated[, 2])
table(expr_simulated[, 1])
table(expr_simulated[, 5])
table(expr_simulated[, 10])
table(expr_simulated[, 11])
hist(expr[1, ])
hist(unlist(expr[1, ]))
hist(log10(unlist(expr[1, ])))
library(fitdistrplus)
fit <- fitdist((unlist(expr[1, ]), "nbinom")
fit <- fitdist(unlist(expr[1, ], "nbinom")
)
hist(unlist(expr[1, ] prob=TRUE, breaks=145)
hist(unlist(expr[1, ], prob=TRUE, breaks=145)
)
hist(unlist(expr[1, ]), prob=TRUE, breaks=145)
fit <- fitdist(unlist(expr[1, ]), "nbinom")
fit
data <- unlist(expr[1, ])
length(unlist(expr[1, ]))
fitD <- dnbinom(0:5708, size=0.2458293, mu=0.3115139)
fitD
hist(fitD)
lines(fitD, lwd="3", col="blue")
hist(data[[1]], prob=TRUE, breaks=145)
hist(data, prob=TRUE, breaks=145)
lines(fitD, lwd="3", col="blue")
expr_mean <- rowSums(expr)
hist(expr_mean)
hist(log((expr_mean))
)
fit <- fitdist(expr_mean, "nbinom")
fit
length(expr_mean)
fitD <- dnbinom(0:2836, size=0.3683393, mu=4909.2483064)
lines(log10(fitD), lwd="3", col="blue")
lines(fitD, lwd="3", col="blue")
hist(expr_mean)
lines(fitD, lwd="3", col="blue")
fitD
hist(fitD)
hist(log10(fitD))
hist(log10(expr_mean))
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated <- expr_simulated * colSums(expr)
expr_simulated[1:4, 1:4]
table(unlist(expr_simulated[1, ]))
table(unlist(expr_simulated[, 1]))
table(unlist(expr_simulated[, 2]))
table(unlist(expr_simulated[, 3]))
table(unlist(expr_simulated[, 4]))
table(unlist(expr_simulated[, ]))
)
w
1
table(unlist(expr_simulated[, 4]))
table(unlist(expr_simulated[, 5]))
table(unlist(expr_simulated[, 6]))
table(unlist(expr_simulated[, 7]))
expected_expr <- read.csv("data/expected_expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expected_expr[1:3, 1:3]
hist(expected_expr[1, ])
hist(unlist(expected_expr[1, ]))
hist(unlist(expected_expr[2, ]))
hist(unlist(expected_expr[, 1]))
hist(unlist(expected_expr[, 2]))
hist(unlist(expected_expr[, 4]))
expected_expr <- t(expected_expr)
expected_expr[1]
expected_expr[1, ]
expected_expr[, 1]
hist(expected_expr[, 1])
table(expected_expr[, 1])
hist(log10(expected_expr[, 1]))
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- as.matrix(expr)
hist(expr[, 1])
hist(log10(expr[, 1]))
hist(log10(expected_expr[, 1]))
expr <- as.matrix(expr)
hist(log10(expr[, 2]))
hist(log10(expr[, 3]))
table(expr[, ])
table(expr[, 1])
log10(0)
hist(log10(expected_expr[, 2]))
hist(log10(expected_expr[, 2] + 1))
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated <- expr_simulated * colSums(expr)
expr_simulated[1:3, 1:3]
table(expr_simulated[, 1])
table(expr_simulated[, 2])
table(expr_simulated[, 3])
table(expr_simulated[, 4])
expected_expr <- read.csv("data/expected_expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expected_expr <- t(expected_expr)
hist(expected_expr[, 1])
hist(expected_expr[, 2])
hist(expected_expr[, 3])
hist(expr[, 2])
hist(expr[, 4])
hist(log10(expr[, 4] + 1))
hist(log10(expected_expr[, 3] + 1))
expected_expr <- expected_expr / colSums(expected_expr)
View(expected_expr)
hist(expected_expr[, 1])
expected_expr[, 1]
expected_expr[, 1][order(expected_expr[, 1], decreasing = TRUE)]
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated[1:4, 1:4]
table(expr_simulated[, 1])
table(expr_simulated[, 2])
table(expr_simulated[, 3])
table(expr_simulated[, 4])
expr_simulated <- expr_simulated/colSums(expr) * colSums(expr)
table(expr_simulated[, 1])
table(expr_simulated[, 2])
table(expr_simulated[, 3])
table(expr_simulated[, 10])
table(expr_simulated)
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated <- expr_simulated/colSums(expr_simulated) * colSums(expr)
table(expr_simulated[, 1])
expr_simulated <- read.csv("data/expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expr <- read.csv("data/SPECTRUM-OV-022_expr_example.csv", stringsAsFactors = FALSE, row.names = 1)
expr_simulated <- t(expr_simulated)
expr_simulated <- expr_simulated/colSums(expr_simulated) * colSums(expr)
expr_mean <- rowSums(expr)
expected_expr <- read.csv("data/expected_expr_simulated.csv", stringsAsFactors = FALSE, row.names = 1)
expected_expr <- t(expected_expr)
expected_expr <- expected_expr / colSums(expected_expr)
table(expr_simulated[, 1])
jhist(expr_simulated[, 1])
jhist(expr_simulated[, 1])
hist(expr_simulated[, 1])
hist(expr_simulated[, 2])
hist(log10(expr_simulated[, 2]))
hist(log10(expr[, 2]))
hist(log10(expr[, 1]))
hist(log10(expr[, 3]))
hist(log10(expr[, 4]))
hist(log10(expr_simulated[, 4]))
expr_simulated[1:5, 1:5]
hist(expr_simulated[1, ])
hist(log10(expr_simulated[1, ]))
hist(log10(expr_simulated[1, ] + 1))
hist(log10(expr_simulated[4, ] + 1))
hist(log10(expr_simulated[6, ] + 1))
hist(log10(expr_simulated[10, ] + 1))
cloneassign_prob <- read.csv("data/clone_assign_prob_0.csv", stringsAsFactors = FALSE, row.names = 1)
cloneassign_prob_simulated <- read.csv("data/clone_assign_prob_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
View(cloneassign_prob)
View(cloneassign_prob)
View(cloneassign_prob)
View(cloneassign_prob_simulated)
x <- c(4, 10, 4, 5)
which.max(x)
cloneassign <- apply(cloneassign_prob, 1, which.max)
cloneassign_simulated <- apply(cloneassign_prob_simulated, 1, which.max)
cloneassign
cloneassign_simulated
table(cloneassign)
table(cloneassign_simulated)
table(cloneassign, cloneassign_simulated)
cloneassign <- apply(cloneassign_prob, 1, which.max)
cloneassign_simulated <- read.csv("data/clone_assign_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
View(cloneassign_simulated)
cloneassign_prob <- read.csv("data/clone_assign_prob_0.csv", stringsAsFactors = FALSE, row.names = 1)
cloneassign_prob_simulated <- read.csv("data/clone_assign_prob_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
cloneassign <- apply(cloneassign_prob, 1, which.max)
cloneassign
cloneassign_simulated <- cloneassign_simulated$X0 + 1
head(cloneassign_simulated)
head(cloneassign)
table(cloneassign_simulated, cloneassign)
cloneassign_prob <- read.csv("data/SPECTRUM-OV-022_clone_assign_prob_0.csv", stringsAsFactors = FALSE, row.names = 1)
cloneassign <- apply(cloneassign_prob, 1, which.max)
cloneassign_simulated <- read.csv("data/clone_assign_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
View(cloneassign_prob)
View(cloneassign_simulated)
cloneassign
cloneassign <- apply(cloneassign_prob, 1, which.max)
cloneassign_simulated <- cloneassign_simulated$X0
cloneassign_simulated <- read.csv("data/clone_assign_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
cloneassign_simulated <- cloneassign_simulated$X0 + 1
sum(cloneassign_simulated == cloneassign)
table(cloneassign, cloneassign_simulated)
gene_simulated <- read.csv("data/gene_type_score_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
gene <- read.csv("data/SPECTRUM-OV-022_gene_type_score_0.csv", stringsAsFactors = FALSE, row.names = 1)
head(gene)
View(gene)
View(gene_simulated)
gene_simulated <- read.csv("data/gene_type_score_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
gene <- read.csv("data/SPECTRUM-OV-022_gene_type_score_0.csv", stringsAsFactors = FALSE, row.names = 1)
View(gene)
View(gene_simulated)
gene_simulated_assignment <- apply(gene_simulated_assignment, 1, which.max)
gene_assignment <- apply(gene_assignment, 1, which.max)
gene_simulated_assignment <- apply(gene_simulated, 1, which.max)
gene_assignment <- apply(gene, 1, which.max)
gene_simulated_assignment
gene_assignment
gene_simulated_assignment <- gene_simulated_assignment[intersect(gene_simulated_assignment, gene_assignment)]
gene_assignment <- gene_assignment[intersect(gene_simulated_assignment, gene_assignment)]
gene_simulated <- read.csv("data/gene_type_score_simulated_0.csv", stringsAsFactors = FALSE, row.names = 1)
gene <- read.csv("data/SPECTRUM-OV-022_gene_type_score_0.csv", stringsAsFactors = FALSE, row.names = 1)
gene_simulated_assignment <- apply(gene_simulated, 1, which.max)
gene_assignment <- apply(gene, 1, which.max)
overlapping_genes <- intersect(names(gene_simulated_assignment), names(gene_assignment))
gene_simulated_assignment <- gene_simulated_assignment[overlapping_genes]
gene_assignment <- gene_assignment[overlapping_genes]
table(gene_simulated_assignment, gene_assignment)
