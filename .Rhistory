wilcoxTestBetweenSubtypes <- function(table1, table2){
results <- NULL
for(i in 1:nrow(table1)){
test <- wilcox.test(as.numeric(table1[i, ]), as.numeric(table2[i, ]))
p <- test$p.value
if(is.null(results)){
results <- data.frame(gene = rownames(table1)[i], pvalue = p)
}else{
results <- rbind(results, data.frame(gene = rownames(table1)[i], pvalue = p))
}
}
results
}
pcaCorrelationWithSubtype <- function(pcaTable){
keepcol <- ncol(pcaTable)-1
results <- list()
table1 <- pcaTable[pcaTable$lncsubtype == 1, ]
table2 <- pcaTable[pcaTable$lncsubtype == 2, ]
table3 <- pcaTable[pcaTable$lncsubtype == 3, ]
table1 <- as.data.frame(t(table1[, 1:keepcol]))
table2 <- as.data.frame(t(table2[, 1:keepcol]))
table3 <- as.data.frame(t(table3[, 1:keepcol]))
results$result12 <- wilcoxTestBetweenSubtypes(table1, table2)
results$result13 <- wilcoxTestBetweenSubtypes(table1, table3)
results$result23 <- wilcoxTestBetweenSubtypes(table2, table3)
results$result1 <- wilcoxTestBetweenSubtypes(table1, cbind(table2, table3))
results$result2 <- wilcoxTestBetweenSubtypes(table2, cbind(table1, table3))
results$result3 <- wilcoxTestBetweenSubtypes(table3, cbind(table1, table2))
results$result12$q <- p.adjust(results$result12$pvalue, method = "bonferroni")
results$result13$q <- p.adjust(results$result13$pvalue, method = "bonferroni")
results$result23$q <- p.adjust(results$result23$pvalue, method = "bonferroni")
results$result1$q <- p.adjust(results$result1$pvalue, method = "bonferroni")
results$result2$q <- p.adjust(results$result2$pvalue, method = "bonferroni")
results$result3$q <- p.adjust(results$result3$pvalue, method = "bonferroni")
results
}
# select most significantly altered genes, then do PCA
geneCor <- pcaCorrelationWithSubtype(codingTraining)
codingTraining <- read.csv("codingTraining_TCGA_0219.csv", header = TRUE, row.names = 1)
lncTraining <- read.csv("lncTraining_TCGA_0219.csv", header = TRUE, row.names = 1)
# parse the Seurat object into SingleCellExperiment again
dfData <- as.SingleCellExperiment(dfData)
library(Seurat)
library(SingleCellExperiment)
dfData <- readRDS("sample_data/OMENT-CD45P_IGO_09443_E_1.rdata")
cellassign_paths <- c("../cellassign_output/Sample_19-03-11A-2_IGO_09666_2_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-3_IGO_09666_3_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-4_IGO_09666_4_counts_cellassign_output_20190722.rdata")
cellassign_fits <- list()
for(i in 1:length(cellassign_paths)){
cellassign_fits[[i]] <- readRDS(cellassign_paths[i])
}
input <- readRDS("../20190719_cellassign_input.rdata")
# visualiztion
index <- 1
library(SingleCellExperiment)
library(scater)
data <- input[[index]][[3]]
data <- runTSNE(data)
# color with phagocytosis markers
colData(data)$Cd4 <- as.numeric(logcounts(data["ENSMUSG00000023274", ]))
colData(data)$Cd8a <- as.numeric(logcounts(data["ENSMUSG00000053977", ]))
colData(data)$Cd33 <- as.numeric(logcounts(data["ENSMUSG00000004609", ]))
colData(data)$cellassign <- cellassign_fits[[index]]$cell_type
plotPCA(data, colour_by = "cellassign")
for(i in 1:length(cellassign_paths)){
cellassign_fits[[i]] <- readRDS(cellassign_paths[i])
}
cellassign_paths <- c("../cellassign_output/Sample_19-03-11A-2_IGO_09666_2_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-3_IGO_09666_3_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-4_IGO_09666_4_counts_cellassign_output_20190722.rdata")
cellassign_fits <- list()
for(i in 1:length(cellassign_paths)){
cellassign_fits[[i]] <- readRDS(cellassign_paths[i])
}
pwd()
cellassign_paths <- c("../cellassign_output/Sample_19-03-11A-2_IGO_09666_2_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-3_IGO_09666_3_counts_cellassign_output_20190722.rdata",
"../cellassign_output/Sample_19-03-11A-4_IGO_09666_4_counts_cellassign_output_20190722.rdata")
cellassign_fits <- list()
for(i in 1:length(cellassign_paths)){
cellassign_fits[[i]] <- readRDS(cellassign_paths[i])
}
library(cellassign)
?cellassign
dim(macrophage_matrix)
m <- c("P-0002356-T01-IM3", "P-0000355-T01-IM3", "P-0002807-T01-IM3", "P-0002231-T01-IM3", "P-0006113-T01-IM5", "P-0007785-T01-IM5", "P-0009968-T01-IM5", "P-0012795-T01-IM5", "P-0017826-T01-IM6", "P-0020084-T01-IM6", "P-0022182-T01-IM6", "P-0022948-T01-IM6", "P-0023591-T01-IM6", "P-0026342-T01-IM6", "P-0031691-T02-IM6", "P-0033927-T01-IM6", "P-0034943-T01-IM6", "P-0005330-T02-IM5", "P-0034923-T01-IM6", "P-0036400-T03-IM6", "P-0037448-T01-IM6", "P-0039028-T01-IM6", "P-0042823-T01-IM6", "P-0043261-T02-IM6", "P-0046316-T01-IM6")
deletion <- m
m <- c("P-0001465-T01-IM3", "P-0000708-T01-IM3", "P-0001002-T01-IM3", "P-0002134-T02-IM3", "P-0002191-T01-IM3", "P-0000779-T01-IM3", "P-0004157-T01-IM5", "P-0006001-T01-IM5", "P-0007552-T01-IM5", "P-0011151-T01-IM5", "P-0012719-T01-IM5", "P-0012795-T01-IM5", "P-0015419-T01-IM6", "P-0015646-T01-IM6", "P-0016567-T01-IM6", "P-0016982-T01-IM6", "P-0018332-T01-IM6", "P-0018994-T01-IM6", "P-0018769-T02-IM6", "P-0019563-T01-IM6", "P-0020752-T01-IM6", "P-0021042-T01-IM6", "P-0022075-T01-IM6", "P-0023155-T01-IM6", "P-0023618-T01-IM6", "P-0023936-T02-IM6", "P-0024976-T01-IM6", "P-0026360-T01-IM6", "P-0030301-T01-IM6", "P-0032019-T01-IM6", "P-0032528-T01-IM6", "P-0032963-T01-IM6", "P-0032893-T01-IM6", "P-0033556-T01-IM6", "P-0033655-T01-IM6", "P-0036386-T01-IM6", "P-0039963-T01-IM6", "P-0040933-T01-IM6", "P-0040913-T01-IM6", "P-0042348-T01-IM6", "P-0008921-T02-IM6", "P-0044105-T01-IM6", "P-0045532-T01-IM6", "P-0045584-T01-IM6", "P-0046010-T01-IM6", "P-0046566-T02-IM6")
intersect(m, deletion)
install.packages("gprofiler2")
library(gprofiler2)
t <- read.table("SPECTRUM-OV-045_clonealign_filtered_A_C.tsv")
head(t)
table <- gconvert(query = rownames(t), organism = "hsapiens",
target="ENSG", mthreshold = 1, filter_na = TRUE)
View(table)
table <- gconvert(query = rownames(t), organism = "hsapiens",
target="ENSG", mthreshold = Inf, filter_na = TRUE)
table
table <- gconvert(query = rownames(t), organism = "hsapiens",
target="ENSG", mthreshold = Inf, filter_na = FALSE)
table[is.na(table$name), ]
View(table)
tableRemove <- gconvert(query = rownames(t), organism = "hsapiens",
+                   target="ENSG", mthreshold = Inf, filter_na = TRUE)
tableRemove <- gconvert(query = rownames(t), organism = "hsapiens",  target="ENSG", mthreshold = Inf, filter_na = TRUE)
setdiff(table$input, tableRemove$input)
library(org.Hs.eg.db)
mapped <- mappedkeys(org.Hs.egPATH2EG)
L <- as.list(org.Hs.egPATH2EG[mapped])
Kegg_ID <- names(L)
Gene_IDs <- sapply(L, paste, collapse=",")
Kegg_ID
Gene_IDs
read_ltm_tree <- function(edge_list) {
# Find the root
g <- igraph::graph_from_edgelist(as.matrix(edge_list))
V(g)$id <- seq(vcount(g))
return(g)
}
tree_2_edge_list <- function(tree) {
tree$node.label[1] <- "root"
node_names <- c(tree$tip.label, tree$node.label)
edges <- tree$edge
edges <- data.frame(
source=node_names[edges[, 1]],
target=node_names[edges[, 2]],
stringsAsFactors=FALSE
)
edges$source <- gsub("cell_", "", edges$source)
edges$target <- gsub("cell_", "", edges$target)
return(edges)
}
format_tree <- function(tree) {
locus_tips <- grep('locus', tree$tip.label, value=TRUE)
tree <- drop.tip(tree, locus_tips)
tree <- compute.brlen(tree, 1)
tree$tip.label <- gsub('cell_', '', tree$tip.label)
return(tree)
}
library(ape)
library(ggplot2)
tree <- read.tree("tree.newick")
# Find the root
g <- igraph::graph_from_edgelist(as.matrix(edge_list))
V(g)$id <- seq(vcount(g))
return(g)
read_ltm_tree <- function(edge_list) {
# Find the root
g <- igraph::graph_from_edgelist(as.matrix(edge_list))
V(g)$id <- seq(vcount(g))
return(g)
}
tree_2_edge_list <- function(tree) {
tree$node.label[1] <- "root"
node_names <- c(tree$tip.label, tree$node.label)
edges <- tree$edge
edges <- data.frame(
source=node_names[edges[, 1]],
target=node_names[edges[, 2]],
stringsAsFactors=FALSE
)
edges$source <- gsub("cell_", "", edges$source)
edges$target <- gsub("cell_", "", edges$target)
return(edges)
}
format_tree <- function(tree) {
locus_tips <- grep('locus', tree$tip.label, value=TRUE)
tree <- drop.tip(tree, locus_tips)
tree <- compute.brlen(tree, 1)
tree$tip.label <- gsub('cell_', '', tree$tip.label)
return(tree)
}
library(ape)
library(ggplot2)
tree <- read.tree("tree.newick")
tree <- format_tree(tree)
setwd("~/pyro_tutorial/clonealign_pyro")
read_ltm_tree <- function(edge_list) {
# Find the root
g <- igraph::graph_from_edgelist(as.matrix(edge_list))
V(g)$id <- seq(vcount(g))
return(g)
}
tree_2_edge_list <- function(tree) {
tree$node.label[1] <- "root"
node_names <- c(tree$tip.label, tree$node.label)
edges <- tree$edge
edges <- data.frame(
source=node_names[edges[, 1]],
target=node_names[edges[, 2]],
stringsAsFactors=FALSE
)
edges$source <- gsub("cell_", "", edges$source)
edges$target <- gsub("cell_", "", edges$target)
return(edges)
}
format_tree <- function(tree) {
locus_tips <- grep('locus', tree$tip.label, value=TRUE)
tree <- drop.tip(tree, locus_tips)
tree <- compute.brlen(tree, 1)
tree$tip.label <- gsub('cell_', '', tree$tip.label)
return(tree)
}
library(ape)
library(ggplot2)
tree <- read.tree("tree.newick")
tree <- format_tree(tree)
write.tree(tree, file = "tree0.newick")
View(tree)
read_ltm_tree <- function(edge_list) {
# Find the root
g <- igraph::graph_from_edgelist(as.matrix(edge_list))
V(g)$id <- seq(vcount(g))
return(g)
}
tree_2_edge_list <- function(tree) {
tree$node.label[1] <- "root"
node_names <- c(tree$tip.label, tree$node.label)
edges <- tree$edge
edges <- data.frame(
source=node_names[edges[, 1]],
target=node_names[edges[, 2]],
stringsAsFactors=FALSE
)
edges$source <- gsub("cell_", "", edges$source)
edges$target <- gsub("cell_", "", edges$target)
return(edges)
}
format_tree <- function(tree) {
locus_tips <- grep('locus', tree$tip.label, value=TRUE)
tree <- drop.tip(tree, locus_tips)
tree <- compute.brlen(tree, 1)
tree$tip.label <- gsub('cell_', '', tree$tip.label)
return(tree)
}
library(ape)
library(ggplot2)
tree <- read.tree("tree.newick")
tree <- format_tree(tree)
write.tree(tree, file = "tree0.newick")
View(tree)
tree <- read.tree("tree.newick")
View(tree)
tree <- read.tree("tree.newick")
View(tree)
tree <- format_tree(tree)
write.tree(tree, file = "tree0.newick")
